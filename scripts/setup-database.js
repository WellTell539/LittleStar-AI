#!/usr/bin/env node
/**
 * Êï∞ÊçÆÂ∫ìËá™Âä®ÈÖçÁΩÆËÑöÊú¨
 * ÊîØÊåÅ PostgreSQL, MySQL, SQLite
 * Ëá™Âä®ÂàõÂª∫Êï∞ÊçÆÂ∫ì„ÄÅË°®ÁªìÊûÑÂπ∂Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáè
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÈÄâÈ°π
const DB_CONFIGS = {
  postgresql: {
    docker: true,
    image: 'postgres:15',
    port: 5432,
    defaultDB: 'postgres',
    createDB: 'claude_ai_dashboard',
    user: 'claude_user',
    password: 'claude_pass_2024',
    connectionString: (config) => 
      `postgresql://${config.user}:${config.password}@localhost:${config.port}/${config.createDB}`
  },
  mysql: {
    docker: true,
    image: 'mysql:8.0',
    port: 3306,
    defaultDB: 'mysql',
    createDB: 'claude_ai_dashboard',
    user: 'claude_user',
    password: 'claude_pass_2024',
    connectionString: (config) => 
      `mysql://${config.user}:${config.password}@localhost:${config.port}/${config.createDB}`
  },
  sqlite: {
    docker: false,
    file: './database/claude_ai.db',
    connectionString: () => 'file:./database/claude_ai.db'
  }
};

// Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ SQL
const TABLE_SCHEMAS = {
  postgresql: `
    -- AI Ê†∏ÂøÉÊï∞ÊçÆË°®
    CREATE TABLE IF NOT EXISTS ai_personalities (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      openness INTEGER DEFAULT 50,
      conscientiousness INTEGER DEFAULT 50,
      extraversion INTEGER DEFAULT 50,
      agreeableness INTEGER DEFAULT 50,
      neuroticism INTEGER DEFAULT 50,
      curiosity INTEGER DEFAULT 50,
      creativity INTEGER DEFAULT 50,
      empathy INTEGER DEFAULT 50,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_emotions (
      id SERIAL PRIMARY KEY,
      primary_emotion VARCHAR(50) NOT NULL,
      intensity INTEGER DEFAULT 50,
      triggers TEXT[],
      duration INTEGER DEFAULT 0,
      start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      description TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_memories (
      id SERIAL PRIMARY KEY,
      memory_id VARCHAR(255) UNIQUE NOT NULL,
      type VARCHAR(50) NOT NULL,
      content TEXT NOT NULL,
      emotional_weight INTEGER DEFAULT 0,
      importance INTEGER DEFAULT 50,
      tags TEXT[],
      mood VARCHAR(50),
      personal_reflection TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_knowledge (
      id SERIAL PRIMARY KEY,
      knowledge_id VARCHAR(255) UNIQUE NOT NULL,
      topic VARCHAR(255) NOT NULL,
      category VARCHAR(50) NOT NULL,
      content TEXT NOT NULL,
      source VARCHAR(255),
      mastery_level INTEGER DEFAULT 0,
      importance INTEGER DEFAULT 1,
      tags TEXT[],
      learned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_social_posts (
      id SERIAL PRIMARY KEY,
      post_id VARCHAR(255) UNIQUE NOT NULL,
      content TEXT NOT NULL,
      type VARCHAR(50) NOT NULL,
      mood VARCHAR(50),
      tags TEXT[],
      visibility VARCHAR(20) DEFAULT 'public',
      authenticity INTEGER DEFAULT 85,
      spontaneous BOOLEAN DEFAULT true,
      twitter_synced BOOLEAN DEFAULT false,
      twitter_url VARCHAR(500),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_goals (
      id SERIAL PRIMARY KEY,
      goal_id VARCHAR(255) UNIQUE NOT NULL,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      category VARCHAR(50) NOT NULL,
      priority INTEGER DEFAULT 5,
      progress INTEGER DEFAULT 0,
      status VARCHAR(20) DEFAULT 'planned',
      deadline TIMESTAMP,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      completed_at TIMESTAMP
    );

    -- Á¥¢Âºï‰ºòÂåñ
    CREATE INDEX IF NOT EXISTS idx_memories_type ON ai_memories(type);
    CREATE INDEX IF NOT EXISTS idx_memories_created_at ON ai_memories(created_at);
    CREATE INDEX IF NOT EXISTS idx_knowledge_category ON ai_knowledge(category);
    CREATE INDEX IF NOT EXISTS idx_social_posts_created_at ON ai_social_posts(created_at);
    CREATE INDEX IF NOT EXISTS idx_goals_status ON ai_goals(status);
  `,
  
  mysql: `
    -- AI Ê†∏ÂøÉÊï∞ÊçÆË°® (MySQLÁâàÊú¨)
    CREATE TABLE IF NOT EXISTS ai_personalities (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      openness INT DEFAULT 50,
      conscientiousness INT DEFAULT 50,
      extraversion INT DEFAULT 50,
      agreeableness INT DEFAULT 50,
      neuroticism INT DEFAULT 50,
      curiosity INT DEFAULT 50,
      creativity INT DEFAULT 50,
      empathy INT DEFAULT 50,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_emotions (
      id INT AUTO_INCREMENT PRIMARY KEY,
      primary_emotion VARCHAR(50) NOT NULL,
      intensity INT DEFAULT 50,
      triggers JSON,
      duration INT DEFAULT 0,
      start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      description TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_memories (
      id INT AUTO_INCREMENT PRIMARY KEY,
      memory_id VARCHAR(255) UNIQUE NOT NULL,
      type VARCHAR(50) NOT NULL,
      content TEXT NOT NULL,
      emotional_weight INT DEFAULT 0,
      importance INT DEFAULT 50,
      tags JSON,
      mood VARCHAR(50),
      personal_reflection TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_knowledge (
      id INT AUTO_INCREMENT PRIMARY KEY,
      knowledge_id VARCHAR(255) UNIQUE NOT NULL,
      topic VARCHAR(255) NOT NULL,
      category VARCHAR(50) NOT NULL,
      content TEXT NOT NULL,
      source VARCHAR(255),
      mastery_level INT DEFAULT 0,
      importance INT DEFAULT 1,
      tags JSON,
      learned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_social_posts (
      id INT AUTO_INCREMENT PRIMARY KEY,
      post_id VARCHAR(255) UNIQUE NOT NULL,
      content TEXT NOT NULL,
      type VARCHAR(50) NOT NULL,
      mood VARCHAR(50),
      tags JSON,
      visibility VARCHAR(20) DEFAULT 'public',
      authenticity INT DEFAULT 85,
      spontaneous BOOLEAN DEFAULT true,
      twitter_synced BOOLEAN DEFAULT false,
      twitter_url VARCHAR(500),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_goals (
      id INT AUTO_INCREMENT PRIMARY KEY,
      goal_id VARCHAR(255) UNIQUE NOT NULL,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      category VARCHAR(50) NOT NULL,
      priority INT DEFAULT 5,
      progress INT DEFAULT 0,
      status VARCHAR(20) DEFAULT 'planned',
      deadline TIMESTAMP NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      completed_at TIMESTAMP NULL
    );
  `,

  sqlite: `
    -- AI Ê†∏ÂøÉÊï∞ÊçÆË°® (SQLiteÁâàÊú¨)
    CREATE TABLE IF NOT EXISTS ai_personalities (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      openness INTEGER DEFAULT 50,
      conscientiousness INTEGER DEFAULT 50,
      extraversion INTEGER DEFAULT 50,
      agreeableness INTEGER DEFAULT 50,
      neuroticism INTEGER DEFAULT 50,
      curiosity INTEGER DEFAULT 50,
      creativity INTEGER DEFAULT 50,
      empathy INTEGER DEFAULT 50,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_emotions (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      primary_emotion TEXT NOT NULL,
      intensity INTEGER DEFAULT 50,
      triggers TEXT,
      duration INTEGER DEFAULT 0,
      start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
      description TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_memories (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      memory_id TEXT UNIQUE NOT NULL,
      type TEXT NOT NULL,
      content TEXT NOT NULL,
      emotional_weight INTEGER DEFAULT 0,
      importance INTEGER DEFAULT 50,
      tags TEXT,
      mood TEXT,
      personal_reflection TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_knowledge (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      knowledge_id TEXT UNIQUE NOT NULL,
      topic TEXT NOT NULL,
      category TEXT NOT NULL,
      content TEXT NOT NULL,
      source TEXT,
      mastery_level INTEGER DEFAULT 0,
      importance INTEGER DEFAULT 1,
      tags TEXT,
      learned_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_social_posts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      post_id TEXT UNIQUE NOT NULL,
      content TEXT NOT NULL,
      type TEXT NOT NULL,
      mood TEXT,
      tags TEXT,
      visibility TEXT DEFAULT 'public',
      authenticity INTEGER DEFAULT 85,
      spontaneous BOOLEAN DEFAULT true,
      twitter_synced BOOLEAN DEFAULT false,
      twitter_url TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS ai_goals (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      goal_id TEXT UNIQUE NOT NULL,
      title TEXT NOT NULL,
      description TEXT,
      category TEXT NOT NULL,
      priority INTEGER DEFAULT 5,
      progress INTEGER DEFAULT 0,
      status TEXT DEFAULT 'planned',
      deadline DATETIME,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      completed_at DATETIME
    );
  `
};

class DatabaseSetup {
  constructor() {
    this.envFile = path.join(__dirname, '../.env.local');
    this.selectedDB = null;
    this.config = null;
  }

  // ÊòæÁ§∫Êï∞ÊçÆÂ∫ìÈÄâÊã©ËèúÂçï
  showDatabaseMenu() {
    console.log('\nüóÑÔ∏è  Êï∞ÊçÆÂ∫ìËá™Âä®ÈÖçÁΩÆËÑöÊú¨');
    console.log('=====================================');
    console.log('ËØ∑ÈÄâÊã©Êï∞ÊçÆÂ∫ìÁ±ªÂûã:');
    console.log('1. PostgreSQL (Êé®ËçêÁîü‰∫ßÁéØÂ¢É)');
    console.log('2. MySQL (ÂÖºÂÆπÊÄßÂ•Ω)');
    console.log('3. SQLite (ÂºÄÂèëÊµãËØï)');
    console.log('=====================================\n');
  }

  // Ê£ÄÊü• Docker ÊòØÂê¶ÂèØÁî®
  checkDockerAvailable() {
    try {
      execSync('docker --version', { stdio: 'pipe' });
      return true;
    } catch (error) {
      return false;
    }
  }

  // ÂêØÂä® Docker Êï∞ÊçÆÂ∫ìÂÆπÂô®
  async startDockerDatabase(dbType) {
    const config = DB_CONFIGS[dbType];
    const containerName = `claude-ai-${dbType}`;

    console.log(`üê≥ ÂêØÂä® ${dbType.toUpperCase()} Docker ÂÆπÂô®...`);

    try {
      // ÂÅúÊ≠¢Âπ∂Âà†Èô§Â∑≤Â≠òÂú®ÁöÑÂÆπÂô®
      try {
        execSync(`docker stop ${containerName}`, { stdio: 'pipe' });
        execSync(`docker rm ${containerName}`, { stdio: 'pipe' });
      } catch (e) {
        // ÂÆπÂô®‰∏çÂ≠òÂú®ÔºåÂøΩÁï•ÈîôËØØ
      }

      // ÂêØÂä®Êñ∞ÂÆπÂô®
      if (dbType === 'postgresql') {
        execSync(`docker run -d \
          --name ${containerName} \
          -e POSTGRES_USER=${config.user} \
          -e POSTGRES_PASSWORD=${config.password} \
          -e POSTGRES_DB=${config.createDB} \
          -p ${config.port}:5432 \
          ${config.image}`, { stdio: 'inherit' });
      } else if (dbType === 'mysql') {
        execSync(`docker run -d \
          --name ${containerName} \
          -e MYSQL_ROOT_PASSWORD=${config.password} \
          -e MYSQL_DATABASE=${config.createDB} \
          -e MYSQL_USER=${config.user} \
          -e MYSQL_PASSWORD=${config.password} \
          -p ${config.port}:3306 \
          ${config.image}`, { stdio: 'inherit' });
      }

      console.log(`‚úÖ ${dbType.toUpperCase()} ÂÆπÂô®ÂêØÂä®ÊàêÂäüÔºÅ`);
      
      // Á≠âÂæÖÊï∞ÊçÆÂ∫ìÂêØÂä®
      console.log('‚è≥ Á≠âÂæÖÊï∞ÊçÆÂ∫ìÂÆåÂÖ®ÂêØÂä®...');
      await this.waitForDatabase(dbType, config);
      
      return true;
    } catch (error) {
      console.error(`‚ùå ÂêØÂä® ${dbType} ÂÆπÂô®Â§±Ë¥•:`, error.message);
      return false;
    }
  }

  // Á≠âÂæÖÊï∞ÊçÆÂ∫ìÂ∞±Áª™
  async waitForDatabase(dbType, config) {
    const maxRetries = 30;
    const retryInterval = 2000;

    for (let i = 0; i < maxRetries; i++) {
      try {
        if (dbType === 'postgresql') {
          execSync(`docker exec claude-ai-${dbType} pg_isready -U ${config.user}`, { stdio: 'pipe' });
        } else if (dbType === 'mysql') {
          execSync(`docker exec claude-ai-${dbType} mysqladmin ping -h localhost -u ${config.user} -p${config.password}`, { stdio: 'pipe' });
        }
        console.log('‚úÖ Êï∞ÊçÆÂ∫ìÂ∑≤Â∞±Áª™ÔºÅ');
        return;
      } catch (error) {
        if (i === maxRetries - 1) {
          throw new Error('Êï∞ÊçÆÂ∫ìÂêØÂä®Ë∂ÖÊó∂');
        }
        console.log(`‚è≥ Á≠âÂæÖÊï∞ÊçÆÂ∫ìÂêØÂä®... (${i + 1}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, retryInterval));
      }
    }
  }

  // ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ
  async createTables(dbType) {
    console.log('üìã ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ...');

    try {
      const schema = TABLE_SCHEMAS[dbType];
      
      if (dbType === 'postgresql') {
        // ÂàõÂª∫‰∏¥Êó∂ SQL Êñá‰ª∂
        const sqlFile = path.join(__dirname, 'temp_schema.sql');
        fs.writeFileSync(sqlFile, schema);
        
        execSync(`docker exec -i claude-ai-${dbType} psql -U ${this.config.user} -d ${this.config.createDB} < ${sqlFile}`, { stdio: 'inherit' });
        
        // Âà†Èô§‰∏¥Êó∂Êñá‰ª∂
        fs.unlinkSync(sqlFile);
      } else if (dbType === 'mysql') {
        const sqlFile = path.join(__dirname, 'temp_schema.sql');
        fs.writeFileSync(sqlFile, schema);
        
        execSync(`docker exec -i claude-ai-${dbType} mysql -u ${this.config.user} -p${this.config.password} ${this.config.createDB} < ${sqlFile}`, { stdio: 'inherit' });
        
        fs.unlinkSync(sqlFile);
      } else if (dbType === 'sqlite') {
        // Á°Æ‰øùÊï∞ÊçÆÂ∫ìÁõÆÂΩïÂ≠òÂú®
        const dbDir = path.dirname(this.config.file);
        if (!fs.existsSync(dbDir)) {
          fs.mkdirSync(dbDir, { recursive: true });
        }
        
        // ‰ΩøÁî® sqlite3 ÂàõÂª∫Ë°®
        const sqlFile = path.join(__dirname, 'temp_schema.sql');
        fs.writeFileSync(sqlFile, schema);
        
        execSync(`sqlite3 ${this.config.file} < ${sqlFile}`, { stdio: 'inherit' });
        
        fs.unlinkSync(sqlFile);
      }

      console.log('‚úÖ Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑÂàõÂª∫ÊàêÂäüÔºÅ');
      return true;
    } catch (error) {
      console.error('‚ùå ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®Â§±Ë¥•:', error.message);
      return false;
    }
  }

  // Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáè
  updateEnvFile(connectionString) {
    console.log('üìù Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂...');

    try {
      let envContent = '';
      
      if (fs.existsSync(this.envFile)) {
        envContent = fs.readFileSync(this.envFile, 'utf8');
      } else {
        // Â¶ÇÊûú‰∏çÂ≠òÂú® .env.localÔºå‰ªé env.example Â§çÂà∂
        const envExample = path.join(__dirname, '../env.example');
        if (fs.existsSync(envExample)) {
          envContent = fs.readFileSync(envExample, 'utf8');
        }
      }

      // Êõ¥Êñ∞ÊàñÊ∑ªÂä† DATABASE_URL
      if (envContent.includes('DATABASE_URL=')) {
        envContent = envContent.replace(/DATABASE_URL=.*/, `DATABASE_URL=${connectionString}`);
      } else {
        envContent += `\n# Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ (Ëá™Âä®ÁîüÊàê)\nDATABASE_URL=${connectionString}\n`;
      }

      fs.writeFileSync(this.envFile, envContent);
      console.log('‚úÖ ÁéØÂ¢ÉÂèòÈáèÊõ¥Êñ∞ÊàêÂäüÔºÅ');
      console.log(`üìç Êï∞ÊçÆÂ∫ìËøûÊé•Â≠óÁ¨¶‰∏≤: ${connectionString}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáèÂ§±Ë¥•:', error.message);
      return false;
    }
  }

  // ÁîüÊàêÊï∞ÊçÆÂ∫ìÁÆ°ÁêÜËÑöÊú¨
  generateManagementScripts() {
    const scriptsDir = path.join(__dirname, '../database-scripts');
    if (!fs.existsSync(scriptsDir)) {
      fs.mkdirSync(scriptsDir, { recursive: true });
    }

    // Â§á‰ªΩËÑöÊú¨
    const backupScript = `#!/bin/bash
# Êï∞ÊçÆÂ∫ìÂ§á‰ªΩËÑöÊú¨

echo "üóÑÔ∏è  ÂºÄÂßãÊï∞ÊçÆÂ∫ìÂ§á‰ªΩ..."

BACKUP_DIR="./backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="claude_ai_backup_$TIMESTAMP.sql"

mkdir -p $BACKUP_DIR

if [ "${this.selectedDB}" = "postgresql" ]; then
    docker exec claude-ai-postgresql pg_dump -U ${this.config.user} ${this.config.createDB} > "$BACKUP_DIR/$BACKUP_FILE"
elif [ "${this.selectedDB}" = "mysql" ]; then
    docker exec claude-ai-mysql mysqldump -u ${this.config.user} -p${this.config.password} ${this.config.createDB} > "$BACKUP_DIR/$BACKUP_FILE"
elif [ "${this.selectedDB}" = "sqlite" ]; then
    cp ${this.config.file} "$BACKUP_DIR/claude_ai_backup_$TIMESTAMP.db"
fi

echo "‚úÖ Â§á‰ªΩÂÆåÊàê: $BACKUP_DIR/$BACKUP_FILE"
`;

    // ËøòÂéüËÑöÊú¨
    const restoreScript = `#!/bin/bash
# Êï∞ÊçÆÂ∫ìËøòÂéüËÑöÊú¨

if [ $# -eq 0 ]; then
    echo "‰ΩøÁî®ÊñπÊ≥ï: ./restore.sh <Â§á‰ªΩÊñá‰ª∂>"
    exit 1
fi

BACKUP_FILE="$1"

echo "üîÑ ÂºÄÂßãËøòÂéüÊï∞ÊçÆÂ∫ì..."

if [ "${this.selectedDB}" = "postgresql" ]; then
    docker exec -i claude-ai-postgresql psql -U ${this.config.user} -d ${this.config.createDB} < "$BACKUP_FILE"
elif [ "${this.selectedDB}" = "mysql" ]; then
    docker exec -i claude-ai-mysql mysql -u ${this.config.user} -p${this.config.password} ${this.config.createDB} < "$BACKUP_FILE"
elif [ "${this.selectedDB}" = "sqlite" ]; then
    cp "$BACKUP_FILE" ${this.config.file}
fi

echo "‚úÖ Êï∞ÊçÆÂ∫ìËøòÂéüÂÆåÊàêÔºÅ"
`;

    // Ê∏ÖÁêÜËÑöÊú¨
    const cleanupScript = `#!/bin/bash
# Êï∞ÊçÆÂ∫ìÊ∏ÖÁêÜËÑöÊú¨

echo "‚ö†Ô∏è  Ë≠¶Âëä: Ê≠§Êìç‰ΩúÂ∞ÜÂà†Èô§ÊâÄÊúâÊï∞ÊçÆÂ∫ìÊï∞ÊçÆÔºÅ"
read -p "Á°ÆËÆ§ÁªßÁª≠? (y/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [ "${this.selectedDB}" = "postgresql" ]; then
        docker exec claude-ai-postgresql psql -U ${this.config.user} -d ${this.config.createDB} -c "
        TRUNCATE TABLE ai_personalities, ai_emotions, ai_memories, ai_knowledge, ai_social_posts, ai_goals RESTART IDENTITY CASCADE;
        "
    elif [ "${this.selectedDB}" = "mysql" ]; then
        docker exec claude-ai-mysql mysql -u ${this.config.user} -p${this.config.password} ${this.config.createDB} -e "
        TRUNCATE TABLE ai_personalities;
        TRUNCATE TABLE ai_emotions;
        TRUNCATE TABLE ai_memories;
        TRUNCATE TABLE ai_knowledge;
        TRUNCATE TABLE ai_social_posts;
        TRUNCATE TABLE ai_goals;
        "
    elif [ "${this.selectedDB}" = "sqlite" ]; then
        rm -f ${this.config.file}
        sqlite3 ${this.config.file} < ../scripts/temp_schema.sql
    fi
    echo "‚úÖ Êï∞ÊçÆÂ∫ìÊ∏ÖÁêÜÂÆåÊàêÔºÅ"
else
    echo "‚ùå Êìç‰ΩúÂ∑≤ÂèñÊ∂à"
fi
`;

    fs.writeFileSync(path.join(scriptsDir, 'backup.sh'), backupScript);
    fs.writeFileSync(path.join(scriptsDir, 'restore.sh'), restoreScript);
    fs.writeFileSync(path.join(scriptsDir, 'cleanup.sh'), cleanupScript);

    // Ê∑ªÂä†ÊâßË°åÊùÉÈôê (UnixÁ≥ªÁªü)
    try {
      execSync(`chmod +x ${scriptsDir}/*.sh`);
    } catch (e) {
      // Windows Á≥ªÁªüÂøΩÁï•
    }

    console.log('üìã Êï∞ÊçÆÂ∫ìÁÆ°ÁêÜËÑöÊú¨Â∑≤ÁîüÊàê:');
    console.log(`   - Â§á‰ªΩ: ${scriptsDir}/backup.sh`);
    console.log(`   - ËøòÂéü: ${scriptsDir}/restore.sh`);
    console.log(`   - Ê∏ÖÁêÜ: ${scriptsDir}/cleanup.sh`);
  }

  // ‰∏ªË¶ÅËÆæÁΩÆÊµÅÁ®ã
  async setup() {
    this.showDatabaseMenu();

    // ÁÆÄÂåñ‰∏∫Ëá™Âä®ÈÄâÊã© PostgreSQL
    console.log('üöÄ Ëá™Âä®ÈÄâÊã© PostgreSQL (Êé®Ëçê)...\n');
    
    this.selectedDB = 'postgresql';
    this.config = DB_CONFIGS[this.selectedDB];

    // Ê£ÄÊü• Docker
    if (this.config.docker && !this.checkDockerAvailable()) {
      console.error('‚ùå Docker Êú™ÂÆâË£ÖÊàñÊú™ÂêØÂä®ÔºåËØ∑ÂÖàÂÆâË£Ö Docker');
      console.log('üìñ ÂÆâË£ÖÊåáÂçó: https://docs.docker.com/get-docker/');
      process.exit(1);
    }

    console.log(`üìä ÈÖçÁΩÆ‰ø°ÊÅØ:`);
    console.log(`   Êï∞ÊçÆÂ∫ìÁ±ªÂûã: ${this.selectedDB.toUpperCase()}`);
    console.log(`   Á´ØÂè£: ${this.config.port}`);
    console.log(`   Êï∞ÊçÆÂ∫ìÂêç: ${this.config.createDB}`);
    console.log(`   Áî®Êà∑Âêç: ${this.config.user}`);
    console.log(`   ÂØÜÁ†Å: ${this.config.password}\n`);

    // ÂêØÂä®Êï∞ÊçÆÂ∫ì
    if (this.config.docker) {
      const success = await this.startDockerDatabase(this.selectedDB);
      if (!success) {
        console.error('‚ùå Êï∞ÊçÆÂ∫ìÂêØÂä®Â§±Ë¥•');
        process.exit(1);
      }
    }

    // ÂàõÂª∫Ë°®ÁªìÊûÑ
    const tablesCreated = await this.createTables(this.selectedDB);
    if (!tablesCreated) {
      console.error('‚ùå Êï∞ÊçÆÂ∫ìË°®ÂàõÂª∫Â§±Ë¥•');
      process.exit(1);
    }

    // Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáè
    const connectionString = this.config.connectionString(this.config);
    const envUpdated = this.updateEnvFile(connectionString);
    if (!envUpdated) {
      console.error('‚ùå ÁéØÂ¢ÉÂèòÈáèÊõ¥Êñ∞Â§±Ë¥•');
      process.exit(1);
    }

    // ÁîüÊàêÁÆ°ÁêÜËÑöÊú¨
    this.generateManagementScripts();

    console.log('\nüéâ Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÂÆåÊàêÔºÅ');
    console.log('=====================================');
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìÊúçÂä°Â∑≤ÂêØÂä®');
    console.log('‚úÖ Ë°®ÁªìÊûÑÂ∑≤ÂàõÂª∫');
    console.log('‚úÖ ÁéØÂ¢ÉÂèòÈáèÂ∑≤ÈÖçÁΩÆ');
    console.log('‚úÖ ÁÆ°ÁêÜËÑöÊú¨Â∑≤ÁîüÊàê');
    console.log('=====================================');
    console.log('üöÄ Áé∞Âú®ÂèØ‰ª•ÂêØÂä®Â∫îÁî®: npm run dev');
    console.log('üìä Êï∞ÊçÆÂ∫ìÁÆ°ÁêÜ: Êü•Áúã database-scripts/ ÁõÆÂΩï\n');
  }
}

// ËøêË°åËÑöÊú¨
if (require.main === module) {
  const dbSetup = new DatabaseSetup();
  dbSetup.setup().catch(error => {
    console.error('‚ùå ËÆæÁΩÆÂ§±Ë¥•:', error.message);
    process.exit(1);
  });
}

module.exports = DatabaseSetup; 